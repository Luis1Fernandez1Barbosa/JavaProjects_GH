package fes.aragon.compilador;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

action code{:
	
	public void imprimirValor(String str){
		System.out.println("Valor del token es: " + str + "\n");
	}
:};

parser code{:
	public static TablaSimbolos tabla = new TablaSimbolos();
	public static Lexico lex;
	private ArrayList<String> datos=new ArrayList<String>();
	public parser parserFuente;
   	
   	public ArrayList<String> codIntermedio(){
   		return datos;
   	}
	public void syntax_error(Symbol st){
		System.out.println("Error en la linea "+ lex.getYyline() +
                    " columna: "+ lex.getYy_currentPos());
	}
	public void cargar(String archivo,TablaSimbolos t) throws Exception{	
		lex=new Lexico(new FileInputStream(new File(archivo)),t);
		parserFuente=new parser(lex);
		parserFuente.parse();
	}
	
:};

terminal COLOCA, ARRIBA, ABAJO, DERECHA, IZQUIERDA;
terminal MOVER, PUNTOYCOMA, REPETIR, VERFRUTA;
terminal CORABRIR, CORCERRAR;
terminal Datos ID;
terminal Integer NUMERO;

non terminal imp;
non terminal expr_1,expr_11,expr_12,expr_13;
non terminal expr_11_0,expr_11_1,expr_11_2;
non terminal expr_a,expr_b;
non terminal Integer num;
non terminal String asig;

asig ::= expr_1:e 
	{:		
            System.out.println("Instruccion: "+ e);
            parser.codIntermedio().add(String.valueOf(e));
            imprimirValor(String.valueOf(e));
        :};

imp ::= ID:s expr_1:e 
        {:
            RESULT=e; 
           	parser.codIntermedio().add(String.valueOf(e));
            s.setValor(String.valueOf(e));
	:}
	|ID:s asig:e 
        {:
            RESULT=e;
            parser.codIntermedio().add(String.valueOf(e));
            s.setValor(String.valueOf(e));
	:};				

expr_1 ::= expr_1 expr_11
		|expr_1 expr_12
		|expr_1 expr_13
		|expr_11
		|expr_12
		|expr_13;

expr_11 ::= expr_11_0: PUNTOYCOMA
		|expr_11_1 PUNTOYCOMA
		|expr_11_2 PUNTOYCOMA
		|error {:;:};
		
expr_11_0 ::= COLOCA NUMERO:n NUMERO:n;

expr_11_1 ::= ARRIBA
		|ABAJO
		|DERECHA
		|IZQUIERDA;

expr_11_2 ::= MOVER NUMERO:n;

expr_a ::= expr_a expr_11
		|expr_a expr_13;

expr_b ::= expr_b expr_11
		|expr_b expr_12;

expr_12 ::= REPETIR NUMERO:n CORABRIR expr_a CORCERRAR;

expr_13 ::= VERFRUTA CORABRIR expr_b CORCERRAR;
	