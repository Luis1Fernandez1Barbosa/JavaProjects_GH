
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 26 00:09:38 CDT 2022
//----------------------------------------------------

package fes.aragon.compilador;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 26 00:09:38 CDT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\003\000\002\002\004\000\002\015" +
    "\004\000\002\015\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\004\000\002\004\003\000\002\007\005\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\011\004\000\002\012\004\000\002\012\004\000" +
    "\002\013\004\000\002\013\004\000\002\005\007\000\002" +
    "\006\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\024\003\020\004\021\005\010\006\005\007" +
    "\017\010\013\011\022\013\023\014\006\001\002\000\004" +
    "\002\050\001\002\000\004\012\ufff1\001\002\000\004\015" +
    "\043\001\002\000\004\012\042\001\002\000\004\012\ufff2" +
    "\001\002\000\004\012\041\001\002\000\030\002\ufff7\003" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\013\ufff7\014\ufff7\016\ufff7\001\002\000\004\012\uffef\001" +
    "\002\000\026\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8\001\002\000" +
    "\026\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\013\ufff9\014\ufff9\001\002\000\026\002" +
    "\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\013\ufffa\014\ufffa\001\002\000\004\012\ufff0\001" +
    "\002\000\030\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\016\ufff4\001" +
    "\002\000\004\020\037\001\002\000\004\020\036\001\002" +
    "\000\004\020\030\001\002\000\026\002\001\003\020\004" +
    "\021\005\010\006\005\007\017\010\013\011\022\013\023" +
    "\014\006\001\002\000\026\002\ufffb\003\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb" +
    "\001\002\000\026\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\013\ufffc\014\ufffc\001\002" +
    "\000\026\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\013\ufffd\014\ufffd\001\002\000\004" +
    "\015\031\001\002\000\002\001\002\000\024\003\020\004" +
    "\021\005\010\006\005\007\017\010\013\011\022\014\006" +
    "\016\033\001\002\000\030\002\uffe9\003\uffe9\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9" +
    "\016\uffe9\001\002\000\024\003\uffec\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\014\uffec\016\uffec\001\002" +
    "\000\024\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\014\uffed\016\uffed\001\002\000\004\012\uffee" +
    "\001\002\000\004\020\040\001\002\000\030\002\ufff3\003" +
    "\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\013\ufff3\014\ufff3\016\ufff3\001\002\000\030\002\ufff6\003" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\013\ufff6\014\ufff6\016\ufff6\001\002\000\030\002\ufff5\003" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\013\ufff5\014\ufff5\016\ufff5\001\002\000\002\001\002\000" +
    "\024\003\020\004\021\005\010\006\005\007\017\010\013" +
    "\011\022\013\023\016\045\001\002\000\030\002\uffe8\003" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\013\uffe8\014\uffe8\016\uffe8\001\002\000\024\003\uffea\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea" +
    "\016\uffea\001\002\000\024\003\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\016\uffeb\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\022\002\003\003\023\004\015\005\014\006" +
    "\013\007\011\010\010\011\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\026\005" +
    "\025\006\024\007\011\010\010\011\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\031\001\001\000\014\004\034\006\033" +
    "\007\011\010\010\011\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\043\001\001\000\014\004\046\005\045" +
    "\007\011\010\010\011\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static TablaSimbolos tabla = new TablaSimbolos();
	public static Lexico lex;
	private ArrayList<String> datos=new ArrayList<String>();
	public parser parserFuente;
   	
   	public ArrayList<String> codIntermedio(){
   		return datos;
   	}
	public void syntax_error(Symbol st){
		System.out.println("Error en la linea "+ lex.getYyline() +
                    " columna: "+ lex.getYy_currentPos());
	}
	public void cargar(String archivo,TablaSimbolos t) throws Exception{	
		lex=new Lexico(new FileInputStream(new File(archivo)),t);
		parserFuente=new parser(lex);
		parserFuente.parse();
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	public void imprimirValor(String str){
		System.out.println("Valor del token es: " + str + "\n");
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr_13 ::= VERFRUTA CORABRIR expr_b CORCERRAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_13",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr_12 ::= REPETIR NUMERO CORABRIR expr_a CORCERRAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_12",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr_b ::= expr_b expr_12 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_b",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr_b ::= expr_b expr_11 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_b",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr_a ::= expr_a expr_13 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_a",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr_a ::= expr_a expr_11 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_a",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr_11_2 ::= MOVER NUMERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_11_2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr_11_1 ::= IZQUIERDA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_11_1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr_11_1 ::= DERECHA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_11_1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr_11_1 ::= ABAJO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_11_1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr_11_1 ::= ARRIBA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_11_1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr_11_0 ::= COLOCA NUMERO NUMERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_11_0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr_11 ::= error 
            {
              String RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_11",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr_11 ::= expr_11_2 PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_11",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr_11 ::= expr_11_1 PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_11",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr_11 ::= expr_11_0 
            {
              String RESULT =null;
		int PUNTOYCOMAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int PUNTOYCOMAright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String PUNTOYCOMA = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_11",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr_1 ::= expr_13 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr_1 ::= expr_12 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr_1 ::= expr_11 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_1 ::= expr_1 expr_13 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_1 ::= expr_1 expr_12 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_1 ::= expr_1 expr_11 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // asig ::= ID asig 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Datos s = (Datos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=e;
            parser.codIntermedio().add(String.valueOf(e));
            s.setValor(String.valueOf(e));
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // asig ::= ID expr_1 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Datos s = (Datos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=e; 
           	parser.codIntermedio().add(String.valueOf(e));
            s.setValor(String.valueOf(e));
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= imp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // imp ::= expr_1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
            System.out.println("Instruccion: "+ e);
            parser.codIntermedio().add(String.valueOf(e));
            imprimirValor(String.valueOf(e));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

